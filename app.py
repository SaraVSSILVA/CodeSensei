# # L√≥gica de Programa√ß√£o:

# Importar as bibliotecas necess√°rias
# Criar mecanismos de integrar GPT com site (API)
# Criar a interface do √∫suario
# Integrar o GPT com a interface do usu√°rio.
# Testar a aplica√ß√£o 

# Importa as bibliotecas necess√°rias
import google.generativeai as genai  # Biblioteca para a API do Gemini
import streamlit as st  # Biblioteca para criar a interface web

# Configura a chave de API do Gemini
genai.configure(api_key="SUA_CHAVE_GEMINI_AQUI")  # Substitua pela sua API Key

# Define o modelo correto da API Gemini
model = genai.GenerativeModel("gemini-1.5-pro")  # Ajustado para o modelo atualizado

# Fun√ß√£o para gerar a resposta do professor virtual
def chat_professor(prompt):
    """
    Esta fun√ß√£o recebe a pergunta do usu√°rio, envia para o modelo Gemini e retorna a explica√ß√£o gerada.
    """
    try:
        response = model.generate_content(prompt)  # Chama a API para obter a explica√ß√£o
        return response.text  # Retorna o texto gerado pelo modelo
    except Exception as e:
        return f"‚ùå Erro ao obter resposta: {str(e)}"  # Retorna uma mensagem de erro se algo falhar

# Configura√ß√£o inicial do Streamlit
st.set_page_config(page_title="CodeSensei", layout="wide")

# Exibe a logo no topo da interface
st.image("human.png", width=150)  # Substitua "logo.png" pelo nome do seu arquivo

# Estiliza√ß√£o da interface com CSS para remover fundo branco
st.markdown(
    """
    <style>
        .big-title { font-size: 32px; font-weight: bold; text-align: center; color: #4CAF50; }
        .subtitle { font-size: 18px; text-align: center; color: #666; }
        .response-box { font-size: 16px; background-color: transparent; padding: 10px; border-radius: 5px; }
    </style>
    """,
    unsafe_allow_html=True,
)

# Exibi√ß√£o do t√≠tulo e descri√ß√£o com estilos customizados
st.markdown('<p class="big-title">üë®‚Äçüè´ CodeSensei - Seu Professor de L√≥gica de Programa√ß√£o</p>', unsafe_allow_html=True)
st.markdown('<p class="subtitle">Fa√ßa perguntas e receba explica√ß√µes detalhadas!</p>', unsafe_allow_html=True)

# Cria√ß√£o de colunas para organizar melhor os elementos
col1, col2 = st.columns([2, 1])  # Define propor√ß√£o das colunas

# Caixa de entrada para perguntas do usu√°rio
with col1:
    entrada = st.text_input("üîπ Digite sua pergunta sobre l√≥gica de programa√ß√£o:")

# Sugest√µes r√°pidas de perguntas comuns
with col2:
    st.markdown("### üéØ Sugest√µes de perguntas:")
    opcoes = ["O que √© um algoritmo?", "Como funciona um loop?", "Qual a diferen√ßa entre vari√°vel e constante?"]
    sugestao = st.selectbox("Escolha uma sugest√£o:", opcoes)

# Garante que alguma pergunta ser√° usada (manual ou sugerida)
pergunta_final = entrada if entrada else sugestao

# Processa a pergunta do usu√°rio e exibe a resposta correta sem fundo branco
if pergunta_final:
    resposta = chat_professor(pergunta_final)  # Chama a fun√ß√£o para obter resposta real
    st.markdown(
        f"""
        <div class="response-box">
            üìò {resposta}
        </div>
        """,
        unsafe_allow_html=True,
    )